// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monik.proto

#ifndef PROTOBUF_monik_2eproto__INCLUDED
#define PROTOBUF_monik_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace tutorial {
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class KeepAlive;
class KeepAliveDefaultTypeInternal;
extern KeepAliveDefaultTypeInternal _KeepAlive_default_instance_;
class Log;
class LogDefaultTypeInternal;
extern LogDefaultTypeInternal _Log_default_instance_;
class PerfCounter;
class PerfCounterDefaultTypeInternal;
extern PerfCounterDefaultTypeInternal _PerfCounter_default_instance_;
}  // namespace tutorial

namespace tutorial {

namespace protobuf_monik_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_monik_2eproto

enum LevelType {
  SYSTEM = 0,
  APPLICATION = 10,
  LOGIC = 20,
  SECURITY = 30,
  LevelType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LevelType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LevelType_IsValid(int value);
const LevelType LevelType_MIN = SYSTEM;
const LevelType LevelType_MAX = SECURITY;
const int LevelType_ARRAYSIZE = LevelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LevelType_descriptor();
inline const ::std::string& LevelType_Name(LevelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LevelType_descriptor(), value);
}
inline bool LevelType_Parse(
    const ::std::string& name, LevelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LevelType>(
    LevelType_descriptor(), name, value);
}
enum SeverityType {
  FATAL = 0,
  ERROR = 10,
  WARNING = 20,
  INFO = 30,
  VERBOSE = 40,
  SeverityType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SeverityType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SeverityType_IsValid(int value);
const SeverityType SeverityType_MIN = FATAL;
const SeverityType SeverityType_MAX = VERBOSE;
const int SeverityType_ARRAYSIZE = SeverityType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SeverityType_descriptor();
inline const ::std::string& SeverityType_Name(SeverityType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SeverityType_descriptor(), value);
}
inline bool SeverityType_Parse(
    const ::std::string& name, SeverityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SeverityType>(
    SeverityType_descriptor(), name, value);
}
enum FormatType {
  PLAIN = 0,
  JSON = 10,
  XML = 20,
  FormatType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FormatType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FormatType_IsValid(int value);
const FormatType FormatType_MIN = PLAIN;
const FormatType FormatType_MAX = XML;
const int FormatType_ARRAYSIZE = FormatType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FormatType_descriptor();
inline const ::std::string& FormatType_Name(FormatType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FormatType_descriptor(), value);
}
inline bool FormatType_Parse(
    const ::std::string& name, FormatType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FormatType>(
    FormatType_descriptor(), name, value);
}
// ===================================================================

class Event : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  enum MsgCase {
    kKa = 4,
    kLg = 5,
    kPc = 6,
    MSG_NOT_SET = 0,
  };

  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }

  void Swap(Event* other);

  // implements Message ----------------------------------------------

  inline Event* New() const PROTOBUF_FINAL { return New(NULL); }

  Event* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string source = 2;
  void clear_source();
  static const int kSourceFieldNumber = 2;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // string instance = 3;
  void clear_instance();
  static const int kInstanceFieldNumber = 3;
  const ::std::string& instance() const;
  void set_instance(const ::std::string& value);
  #if LANG_CXX11
  void set_instance(::std::string&& value);
  #endif
  void set_instance(const char* value);
  void set_instance(const char* value, size_t size);
  ::std::string* mutable_instance();
  ::std::string* release_instance();
  void set_allocated_instance(::std::string* instance);

  // sint64 created = 1;
  void clear_created();
  static const int kCreatedFieldNumber = 1;
  ::google::protobuf::int64 created() const;
  void set_created(::google::protobuf::int64 value);

  // .tutorial.KeepAlive ka = 4;
  bool has_ka() const;
  void clear_ka();
  static const int kKaFieldNumber = 4;
  const ::tutorial::KeepAlive& ka() const;
  ::tutorial::KeepAlive* mutable_ka();
  ::tutorial::KeepAlive* release_ka();
  void set_allocated_ka(::tutorial::KeepAlive* ka);

  // .tutorial.Log lg = 5;
  bool has_lg() const;
  void clear_lg();
  static const int kLgFieldNumber = 5;
  const ::tutorial::Log& lg() const;
  ::tutorial::Log* mutable_lg();
  ::tutorial::Log* release_lg();
  void set_allocated_lg(::tutorial::Log* lg);

  // .tutorial.PerfCounter pc = 6;
  bool has_pc() const;
  void clear_pc();
  static const int kPcFieldNumber = 6;
  const ::tutorial::PerfCounter& pc() const;
  ::tutorial::PerfCounter* mutable_pc();
  ::tutorial::PerfCounter* release_pc();
  void set_allocated_pc(::tutorial::PerfCounter* pc);

  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:tutorial.Event)
 private:
  void set_has_ka();
  void set_has_lg();
  void set_has_pc();

  inline bool has_msg() const;
  void clear_msg();
  inline void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr instance_;
  ::google::protobuf::int64 created_;
  union MsgUnion {
    MsgUnion() {}
    ::tutorial::KeepAlive* ka_;
    ::tutorial::Log* lg_;
    ::tutorial::PerfCounter* pc_;
  } msg_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct  protobuf_monik_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KeepAlive : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.KeepAlive) */ {
 public:
  KeepAlive();
  virtual ~KeepAlive();

  KeepAlive(const KeepAlive& from);

  inline KeepAlive& operator=(const KeepAlive& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeepAlive& default_instance();

  static inline const KeepAlive* internal_default_instance() {
    return reinterpret_cast<const KeepAlive*>(
               &_KeepAlive_default_instance_);
  }

  void Swap(KeepAlive* other);

  // implements Message ----------------------------------------------

  inline KeepAlive* New() const PROTOBUF_FINAL { return New(NULL); }

  KeepAlive* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const KeepAlive& from);
  void MergeFrom(const KeepAlive& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KeepAlive* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 interval = 1;
  void clear_interval();
  static const int kIntervalFieldNumber = 1;
  ::google::protobuf::uint32 interval() const;
  void set_interval(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tutorial.KeepAlive)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 interval_;
  mutable int _cached_size_;
  friend struct  protobuf_monik_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Log : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.Log) */ {
 public:
  Log();
  virtual ~Log();

  Log(const Log& from);

  inline Log& operator=(const Log& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Log& default_instance();

  static inline const Log* internal_default_instance() {
    return reinterpret_cast<const Log*>(
               &_Log_default_instance_);
  }

  void Swap(Log* other);

  // implements Message ----------------------------------------------

  inline Log* New() const PROTOBUF_FINAL { return New(NULL); }

  Log* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Log& from);
  void MergeFrom(const Log& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Log* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string body = 4;
  void clear_body();
  static const int kBodyFieldNumber = 4;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // string tags = 5;
  void clear_tags();
  static const int kTagsFieldNumber = 5;
  const ::std::string& tags() const;
  void set_tags(const ::std::string& value);
  #if LANG_CXX11
  void set_tags(::std::string&& value);
  #endif
  void set_tags(const char* value);
  void set_tags(const char* value, size_t size);
  ::std::string* mutable_tags();
  ::std::string* release_tags();
  void set_allocated_tags(::std::string* tags);

  // .tutorial.LevelType level = 1;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  ::tutorial::LevelType level() const;
  void set_level(::tutorial::LevelType value);

  // .tutorial.SeverityType severity = 2;
  void clear_severity();
  static const int kSeverityFieldNumber = 2;
  ::tutorial::SeverityType severity() const;
  void set_severity(::tutorial::SeverityType value);

  // .tutorial.FormatType format = 3;
  void clear_format();
  static const int kFormatFieldNumber = 3;
  ::tutorial::FormatType format() const;
  void set_format(::tutorial::FormatType value);

  // @@protoc_insertion_point(class_scope:tutorial.Log)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::google::protobuf::internal::ArenaStringPtr tags_;
  int level_;
  int severity_;
  int format_;
  mutable int _cached_size_;
  friend struct  protobuf_monik_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PerfCounter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.PerfCounter) */ {
 public:
  PerfCounter();
  virtual ~PerfCounter();

  PerfCounter(const PerfCounter& from);

  inline PerfCounter& operator=(const PerfCounter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PerfCounter& default_instance();

  static inline const PerfCounter* internal_default_instance() {
    return reinterpret_cast<const PerfCounter*>(
               &_PerfCounter_default_instance_);
  }

  void Swap(PerfCounter* other);

  // implements Message ----------------------------------------------

  inline PerfCounter* New() const PROTOBUF_FINAL { return New(NULL); }

  PerfCounter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PerfCounter& from);
  void MergeFrom(const PerfCounter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PerfCounter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tutorial.PerfCounter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct  protobuf_monik_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Event

// sint64 created = 1;
inline void Event::clear_created() {
  created_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Event::created() const {
  // @@protoc_insertion_point(field_get:tutorial.Event.created)
  return created_;
}
inline void Event::set_created(::google::protobuf::int64 value) {
  
  created_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Event.created)
}

// string source = 2;
inline void Event::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Event::source() const {
  // @@protoc_insertion_point(field_get:tutorial.Event.source)
  return source_.GetNoArena();
}
inline void Event::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Event.source)
}
#if LANG_CXX11
inline void Event::set_source(::std::string&& value) {
  
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Event.source)
}
#endif
inline void Event::set_source(const char* value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Event.source)
}
inline void Event::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Event.source)
}
inline ::std::string* Event::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.Event.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_source() {
  // @@protoc_insertion_point(field_release:tutorial.Event.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Event.source)
}

// string instance = 3;
inline void Event::clear_instance() {
  instance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Event::instance() const {
  // @@protoc_insertion_point(field_get:tutorial.Event.instance)
  return instance_.GetNoArena();
}
inline void Event::set_instance(const ::std::string& value) {
  
  instance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Event.instance)
}
#if LANG_CXX11
inline void Event::set_instance(::std::string&& value) {
  
  instance_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Event.instance)
}
#endif
inline void Event::set_instance(const char* value) {
  
  instance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Event.instance)
}
inline void Event::set_instance(const char* value, size_t size) {
  
  instance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Event.instance)
}
inline ::std::string* Event::mutable_instance() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.Event.instance)
  return instance_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_instance() {
  // @@protoc_insertion_point(field_release:tutorial.Event.instance)
  
  return instance_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_instance(::std::string* instance) {
  if (instance != NULL) {
    
  } else {
    
  }
  instance_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Event.instance)
}

// .tutorial.KeepAlive ka = 4;
inline bool Event::has_ka() const {
  return msg_case() == kKa;
}
inline void Event::set_has_ka() {
  _oneof_case_[0] = kKa;
}
inline void Event::clear_ka() {
  if (has_ka()) {
    delete msg_.ka_;
    clear_has_msg();
  }
}
inline  const ::tutorial::KeepAlive& Event::ka() const {
  // @@protoc_insertion_point(field_get:tutorial.Event.ka)
  return has_ka()
      ? *msg_.ka_
      : ::tutorial::KeepAlive::default_instance();
}
inline ::tutorial::KeepAlive* Event::mutable_ka() {
  if (!has_ka()) {
    clear_msg();
    set_has_ka();
    msg_.ka_ = new ::tutorial::KeepAlive;
  }
  // @@protoc_insertion_point(field_mutable:tutorial.Event.ka)
  return msg_.ka_;
}
inline ::tutorial::KeepAlive* Event::release_ka() {
  // @@protoc_insertion_point(field_release:tutorial.Event.ka)
  if (has_ka()) {
    clear_has_msg();
    ::tutorial::KeepAlive* temp = msg_.ka_;
    msg_.ka_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Event::set_allocated_ka(::tutorial::KeepAlive* ka) {
  clear_msg();
  if (ka) {
    set_has_ka();
    msg_.ka_ = ka;
  }
  // @@protoc_insertion_point(field_set_allocated:tutorial.Event.ka)
}

// .tutorial.Log lg = 5;
inline bool Event::has_lg() const {
  return msg_case() == kLg;
}
inline void Event::set_has_lg() {
  _oneof_case_[0] = kLg;
}
inline void Event::clear_lg() {
  if (has_lg()) {
    delete msg_.lg_;
    clear_has_msg();
  }
}
inline  const ::tutorial::Log& Event::lg() const {
  // @@protoc_insertion_point(field_get:tutorial.Event.lg)
  return has_lg()
      ? *msg_.lg_
      : ::tutorial::Log::default_instance();
}
inline ::tutorial::Log* Event::mutable_lg() {
  if (!has_lg()) {
    clear_msg();
    set_has_lg();
    msg_.lg_ = new ::tutorial::Log;
  }
  // @@protoc_insertion_point(field_mutable:tutorial.Event.lg)
  return msg_.lg_;
}
inline ::tutorial::Log* Event::release_lg() {
  // @@protoc_insertion_point(field_release:tutorial.Event.lg)
  if (has_lg()) {
    clear_has_msg();
    ::tutorial::Log* temp = msg_.lg_;
    msg_.lg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Event::set_allocated_lg(::tutorial::Log* lg) {
  clear_msg();
  if (lg) {
    set_has_lg();
    msg_.lg_ = lg;
  }
  // @@protoc_insertion_point(field_set_allocated:tutorial.Event.lg)
}

// .tutorial.PerfCounter pc = 6;
inline bool Event::has_pc() const {
  return msg_case() == kPc;
}
inline void Event::set_has_pc() {
  _oneof_case_[0] = kPc;
}
inline void Event::clear_pc() {
  if (has_pc()) {
    delete msg_.pc_;
    clear_has_msg();
  }
}
inline  const ::tutorial::PerfCounter& Event::pc() const {
  // @@protoc_insertion_point(field_get:tutorial.Event.pc)
  return has_pc()
      ? *msg_.pc_
      : ::tutorial::PerfCounter::default_instance();
}
inline ::tutorial::PerfCounter* Event::mutable_pc() {
  if (!has_pc()) {
    clear_msg();
    set_has_pc();
    msg_.pc_ = new ::tutorial::PerfCounter;
  }
  // @@protoc_insertion_point(field_mutable:tutorial.Event.pc)
  return msg_.pc_;
}
inline ::tutorial::PerfCounter* Event::release_pc() {
  // @@protoc_insertion_point(field_release:tutorial.Event.pc)
  if (has_pc()) {
    clear_has_msg();
    ::tutorial::PerfCounter* temp = msg_.pc_;
    msg_.pc_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Event::set_allocated_pc(::tutorial::PerfCounter* pc) {
  clear_msg();
  if (pc) {
    set_has_pc();
    msg_.pc_ = pc;
  }
  // @@protoc_insertion_point(field_set_allocated:tutorial.Event.pc)
}

inline bool Event::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void Event::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline Event::MsgCase Event::msg_case() const {
  return Event::MsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// KeepAlive

// uint32 interval = 1;
inline void KeepAlive::clear_interval() {
  interval_ = 0u;
}
inline ::google::protobuf::uint32 KeepAlive::interval() const {
  // @@protoc_insertion_point(field_get:tutorial.KeepAlive.interval)
  return interval_;
}
inline void KeepAlive::set_interval(::google::protobuf::uint32 value) {
  
  interval_ = value;
  // @@protoc_insertion_point(field_set:tutorial.KeepAlive.interval)
}

// -------------------------------------------------------------------

// Log

// .tutorial.LevelType level = 1;
inline void Log::clear_level() {
  level_ = 0;
}
inline ::tutorial::LevelType Log::level() const {
  // @@protoc_insertion_point(field_get:tutorial.Log.level)
  return static_cast< ::tutorial::LevelType >(level_);
}
inline void Log::set_level(::tutorial::LevelType value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Log.level)
}

// .tutorial.SeverityType severity = 2;
inline void Log::clear_severity() {
  severity_ = 0;
}
inline ::tutorial::SeverityType Log::severity() const {
  // @@protoc_insertion_point(field_get:tutorial.Log.severity)
  return static_cast< ::tutorial::SeverityType >(severity_);
}
inline void Log::set_severity(::tutorial::SeverityType value) {
  
  severity_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Log.severity)
}

// .tutorial.FormatType format = 3;
inline void Log::clear_format() {
  format_ = 0;
}
inline ::tutorial::FormatType Log::format() const {
  // @@protoc_insertion_point(field_get:tutorial.Log.format)
  return static_cast< ::tutorial::FormatType >(format_);
}
inline void Log::set_format(::tutorial::FormatType value) {
  
  format_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Log.format)
}

// string body = 4;
inline void Log::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Log::body() const {
  // @@protoc_insertion_point(field_get:tutorial.Log.body)
  return body_.GetNoArena();
}
inline void Log::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Log.body)
}
#if LANG_CXX11
inline void Log::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Log.body)
}
#endif
inline void Log::set_body(const char* value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Log.body)
}
inline void Log::set_body(const char* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Log.body)
}
inline ::std::string* Log::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.Log.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Log::release_body() {
  // @@protoc_insertion_point(field_release:tutorial.Log.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Log::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Log.body)
}

// string tags = 5;
inline void Log::clear_tags() {
  tags_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Log::tags() const {
  // @@protoc_insertion_point(field_get:tutorial.Log.tags)
  return tags_.GetNoArena();
}
inline void Log::set_tags(const ::std::string& value) {
  
  tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Log.tags)
}
#if LANG_CXX11
inline void Log::set_tags(::std::string&& value) {
  
  tags_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Log.tags)
}
#endif
inline void Log::set_tags(const char* value) {
  
  tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Log.tags)
}
inline void Log::set_tags(const char* value, size_t size) {
  
  tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Log.tags)
}
inline ::std::string* Log::mutable_tags() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.Log.tags)
  return tags_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Log::release_tags() {
  // @@protoc_insertion_point(field_release:tutorial.Log.tags)
  
  return tags_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Log::set_allocated_tags(::std::string* tags) {
  if (tags != NULL) {
    
  } else {
    
  }
  tags_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tags);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Log.tags)
}

// -------------------------------------------------------------------

// PerfCounter

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace tutorial

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tutorial::LevelType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tutorial::LevelType>() {
  return ::tutorial::LevelType_descriptor();
}
template <> struct is_proto_enum< ::tutorial::SeverityType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tutorial::SeverityType>() {
  return ::tutorial::SeverityType_descriptor();
}
template <> struct is_proto_enum< ::tutorial::FormatType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tutorial::FormatType>() {
  return ::tutorial::FormatType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_monik_2eproto__INCLUDED
