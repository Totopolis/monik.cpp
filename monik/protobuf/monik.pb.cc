// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monik.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "monik.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tutorial {
class EventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Event> {
  public:
  const ::tutorial::KeepAlive* ka_;
  const ::tutorial::Log* lg_;
  const ::tutorial::PerfCounter* pc_;
} _Event_default_instance_;
class KeepAliveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<KeepAlive> {
} _KeepAlive_default_instance_;
class LogDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Log> {
} _Log_default_instance_;
class PerfCounterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PerfCounter> {
} _PerfCounter_default_instance_;

namespace protobuf_monik_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, created_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, instance_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Event_default_instance_), ka_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Event_default_instance_), lg_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Event_default_instance_), pc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, msg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAlive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAlive, interval_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, severity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, tags_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfCounter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Event)},
  { 11, -1, sizeof(KeepAlive)},
  { 16, -1, sizeof(Log)},
  { 25, -1, sizeof(PerfCounter)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Event_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KeepAlive_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Log_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PerfCounter_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "monik.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _Event_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _KeepAlive_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Log_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _PerfCounter_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Event_default_instance_.DefaultConstruct();
  _KeepAlive_default_instance_.DefaultConstruct();
  _Log_default_instance_.DefaultConstruct();
  _PerfCounter_default_instance_.DefaultConstruct();
  _Event_default_instance_.ka_ = const_cast< ::tutorial::KeepAlive*>(
      ::tutorial::KeepAlive::internal_default_instance());
  _Event_default_instance_.lg_ = const_cast< ::tutorial::Log*>(
      ::tutorial::Log::internal_default_instance());
  _Event_default_instance_.pc_ = const_cast< ::tutorial::PerfCounter*>(
      ::tutorial::PerfCounter::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013monik.proto\022\010tutorial\"\246\001\n\005Event\022\017\n\007cre"
      "ated\030\001 \001(\022\022\016\n\006source\030\002 \001(\t\022\020\n\010instance\030\003"
      " \001(\t\022!\n\002ka\030\004 \001(\0132\023.tutorial.KeepAliveH\000\022"
      "\033\n\002lg\030\005 \001(\0132\r.tutorial.LogH\000\022#\n\002pc\030\006 \001(\013"
      "2\025.tutorial.PerfCounterH\000B\005\n\003msg\"\035\n\tKeep"
      "Alive\022\020\n\010interval\030\001 \001(\r\"\225\001\n\003Log\022\"\n\005level"
      "\030\001 \001(\0162\023.tutorial.LevelType\022(\n\010severity\030"
      "\002 \001(\0162\026.tutorial.SeverityType\022$\n\006format\030"
      "\003 \001(\0162\024.tutorial.FormatType\022\014\n\004body\030\004 \001("
      "\t\022\014\n\004tags\030\005 \001(\t\"\r\n\013PerfCounter*A\n\tLevelT"
      "ype\022\n\n\006SYSTEM\020\000\022\017\n\013APPLICATION\020\n\022\t\n\005LOGI"
      "C\020\024\022\014\n\010SECURITY\020\036*H\n\014SeverityType\022\t\n\005FAT"
      "AL\020\000\022\t\n\005ERROR\020\n\022\013\n\007WARNING\020\024\022\010\n\004INFO\020\036\022\013"
      "\n\007VERBOSE\020(**\n\nFormatType\022\t\n\005PLAIN\020\000\022\010\n\004"
      "JSON\020\n\022\007\n\003XML\020\024B\017\252\002\014Monik.Commonb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 600);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "monik.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_monik_2eproto

const ::google::protobuf::EnumDescriptor* LevelType_descriptor() {
  protobuf_monik_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_monik_2eproto::file_level_enum_descriptors[0];
}
bool LevelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
    case 20:
    case 30:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SeverityType_descriptor() {
  protobuf_monik_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_monik_2eproto::file_level_enum_descriptors[1];
}
bool SeverityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
    case 20:
    case 30:
    case 40:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FormatType_descriptor() {
  protobuf_monik_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_monik_2eproto::file_level_enum_descriptors[2];
}
bool FormatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
    case 20:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Event::kCreatedFieldNumber;
const int Event::kSourceFieldNumber;
const int Event::kInstanceFieldNumber;
const int Event::kKaFieldNumber;
const int Event::kLgFieldNumber;
const int Event::kPcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event::Event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_monik_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.Event)
}
Event::Event(const Event& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source().size() > 0) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  instance_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.instance().size() > 0) {
    instance_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instance_);
  }
  created_ = from.created_;
  clear_has_msg();
  switch (from.msg_case()) {
    case kKa: {
      mutable_ka()->::tutorial::KeepAlive::MergeFrom(from.ka());
      break;
    }
    case kLg: {
      mutable_lg()->::tutorial::Log::MergeFrom(from.lg());
      break;
    }
    case kPc: {
      mutable_pc()->::tutorial::PerfCounter::MergeFrom(from.pc());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tutorial.Event)
}

void Event::SharedCtor() {
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instance_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  created_ = GOOGLE_LONGLONG(0);
  clear_has_msg();
  _cached_size_ = 0;
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:tutorial.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instance_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_msg()) {
    clear_msg();
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_monik_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_monik_2eproto::file_level_metadata[0].descriptor;
}

const Event& Event::default_instance() {
  protobuf_monik_2eproto::InitDefaults();
  return *internal_default_instance();
}

Event* Event::New(::google::protobuf::Arena* arena) const {
  Event* n = new Event;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Event::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:tutorial.Event)
  switch (msg_case()) {
    case kKa: {
      delete msg_.ka_;
      break;
    }
    case kLg: {
      delete msg_.lg_;
      break;
    }
    case kPc: {
      delete msg_.pc_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.Event)
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  created_ = GOOGLE_LONGLONG(0);
  clear_msg();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.Event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sint64 created = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tutorial.Event.source"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string instance = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instance()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instance().data(), this->instance().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tutorial.Event.instance"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tutorial.KeepAlive ka = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ka()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tutorial.Log lg = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tutorial.PerfCounter pc = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.Event)
  // sint64 created = 1;
  if (this->created() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->created(), output);
  }

  // string source = 2;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tutorial.Event.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->source(), output);
  }

  // string instance = 3;
  if (this->instance().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance().data(), this->instance().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tutorial.Event.instance");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->instance(), output);
  }

  // .tutorial.KeepAlive ka = 4;
  if (has_ka()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *msg_.ka_, output);
  }

  // .tutorial.Log lg = 5;
  if (has_lg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *msg_.lg_, output);
  }

  // .tutorial.PerfCounter pc = 6;
  if (has_pc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *msg_.pc_, output);
  }

  // @@protoc_insertion_point(serialize_end:tutorial.Event)
}

::google::protobuf::uint8* Event::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.Event)
  // sint64 created = 1;
  if (this->created() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->created(), target);
  }

  // string source = 2;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tutorial.Event.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->source(), target);
  }

  // string instance = 3;
  if (this->instance().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance().data(), this->instance().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tutorial.Event.instance");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->instance(), target);
  }

  // .tutorial.KeepAlive ka = 4;
  if (has_ka()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *msg_.ka_, false, target);
  }

  // .tutorial.Log lg = 5;
  if (has_lg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *msg_.lg_, false, target);
  }

  // .tutorial.PerfCounter pc = 6;
  if (has_pc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *msg_.pc_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tutorial.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.Event)
  size_t total_size = 0;

  // string source = 2;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  // string instance = 3;
  if (this->instance().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instance());
  }

  // sint64 created = 1;
  if (this->created() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->created());
  }

  switch (msg_case()) {
    // .tutorial.KeepAlive ka = 4;
    case kKa: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.ka_);
      break;
    }
    // .tutorial.Log lg = 5;
    case kLg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.lg_);
      break;
    }
    // .tutorial.PerfCounter pc = 6;
    case kPc: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.pc_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const Event* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Event>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.Event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.source().size() > 0) {

    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  if (from.instance().size() > 0) {

    instance_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instance_);
  }
  if (from.created() != 0) {
    set_created(from.created());
  }
  switch (from.msg_case()) {
    case kKa: {
      mutable_ka()->::tutorial::KeepAlive::MergeFrom(from.ka());
      break;
    }
    case kLg: {
      mutable_lg()->::tutorial::Log::MergeFrom(from.lg());
      break;
    }
    case kPc: {
      mutable_pc()->::tutorial::PerfCounter::MergeFrom(from.pc());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::Swap(Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event::InternalSwap(Event* other) {
  source_.Swap(&other->source_);
  instance_.Swap(&other->instance_);
  std::swap(created_, other->created_);
  std::swap(msg_, other->msg_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_monik_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_monik_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Event

// sint64 created = 1;
void Event::clear_created() {
  created_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Event::created() const {
  // @@protoc_insertion_point(field_get:tutorial.Event.created)
  return created_;
}
void Event::set_created(::google::protobuf::int64 value) {
  
  created_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Event.created)
}

// string source = 2;
void Event::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Event::source() const {
  // @@protoc_insertion_point(field_get:tutorial.Event.source)
  return source_.GetNoArena();
}
void Event::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Event.source)
}
#if LANG_CXX11
void Event::set_source(::std::string&& value) {
  
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Event.source)
}
#endif
void Event::set_source(const char* value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Event.source)
}
void Event::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Event.source)
}
::std::string* Event::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.Event.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Event::release_source() {
  // @@protoc_insertion_point(field_release:tutorial.Event.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Event::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Event.source)
}

// string instance = 3;
void Event::clear_instance() {
  instance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Event::instance() const {
  // @@protoc_insertion_point(field_get:tutorial.Event.instance)
  return instance_.GetNoArena();
}
void Event::set_instance(const ::std::string& value) {
  
  instance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Event.instance)
}
#if LANG_CXX11
void Event::set_instance(::std::string&& value) {
  
  instance_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Event.instance)
}
#endif
void Event::set_instance(const char* value) {
  
  instance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Event.instance)
}
void Event::set_instance(const char* value, size_t size) {
  
  instance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Event.instance)
}
::std::string* Event::mutable_instance() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.Event.instance)
  return instance_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Event::release_instance() {
  // @@protoc_insertion_point(field_release:tutorial.Event.instance)
  
  return instance_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Event::set_allocated_instance(::std::string* instance) {
  if (instance != NULL) {
    
  } else {
    
  }
  instance_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Event.instance)
}

// .tutorial.KeepAlive ka = 4;
bool Event::has_ka() const {
  return msg_case() == kKa;
}
void Event::set_has_ka() {
  _oneof_case_[0] = kKa;
}
void Event::clear_ka() {
  if (has_ka()) {
    delete msg_.ka_;
    clear_has_msg();
  }
}
 const ::tutorial::KeepAlive& Event::ka() const {
  // @@protoc_insertion_point(field_get:tutorial.Event.ka)
  return has_ka()
      ? *msg_.ka_
      : ::tutorial::KeepAlive::default_instance();
}
::tutorial::KeepAlive* Event::mutable_ka() {
  if (!has_ka()) {
    clear_msg();
    set_has_ka();
    msg_.ka_ = new ::tutorial::KeepAlive;
  }
  // @@protoc_insertion_point(field_mutable:tutorial.Event.ka)
  return msg_.ka_;
}
::tutorial::KeepAlive* Event::release_ka() {
  // @@protoc_insertion_point(field_release:tutorial.Event.ka)
  if (has_ka()) {
    clear_has_msg();
    ::tutorial::KeepAlive* temp = msg_.ka_;
    msg_.ka_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Event::set_allocated_ka(::tutorial::KeepAlive* ka) {
  clear_msg();
  if (ka) {
    set_has_ka();
    msg_.ka_ = ka;
  }
  // @@protoc_insertion_point(field_set_allocated:tutorial.Event.ka)
}

// .tutorial.Log lg = 5;
bool Event::has_lg() const {
  return msg_case() == kLg;
}
void Event::set_has_lg() {
  _oneof_case_[0] = kLg;
}
void Event::clear_lg() {
  if (has_lg()) {
    delete msg_.lg_;
    clear_has_msg();
  }
}
 const ::tutorial::Log& Event::lg() const {
  // @@protoc_insertion_point(field_get:tutorial.Event.lg)
  return has_lg()
      ? *msg_.lg_
      : ::tutorial::Log::default_instance();
}
::tutorial::Log* Event::mutable_lg() {
  if (!has_lg()) {
    clear_msg();
    set_has_lg();
    msg_.lg_ = new ::tutorial::Log;
  }
  // @@protoc_insertion_point(field_mutable:tutorial.Event.lg)
  return msg_.lg_;
}
::tutorial::Log* Event::release_lg() {
  // @@protoc_insertion_point(field_release:tutorial.Event.lg)
  if (has_lg()) {
    clear_has_msg();
    ::tutorial::Log* temp = msg_.lg_;
    msg_.lg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Event::set_allocated_lg(::tutorial::Log* lg) {
  clear_msg();
  if (lg) {
    set_has_lg();
    msg_.lg_ = lg;
  }
  // @@protoc_insertion_point(field_set_allocated:tutorial.Event.lg)
}

// .tutorial.PerfCounter pc = 6;
bool Event::has_pc() const {
  return msg_case() == kPc;
}
void Event::set_has_pc() {
  _oneof_case_[0] = kPc;
}
void Event::clear_pc() {
  if (has_pc()) {
    delete msg_.pc_;
    clear_has_msg();
  }
}
 const ::tutorial::PerfCounter& Event::pc() const {
  // @@protoc_insertion_point(field_get:tutorial.Event.pc)
  return has_pc()
      ? *msg_.pc_
      : ::tutorial::PerfCounter::default_instance();
}
::tutorial::PerfCounter* Event::mutable_pc() {
  if (!has_pc()) {
    clear_msg();
    set_has_pc();
    msg_.pc_ = new ::tutorial::PerfCounter;
  }
  // @@protoc_insertion_point(field_mutable:tutorial.Event.pc)
  return msg_.pc_;
}
::tutorial::PerfCounter* Event::release_pc() {
  // @@protoc_insertion_point(field_release:tutorial.Event.pc)
  if (has_pc()) {
    clear_has_msg();
    ::tutorial::PerfCounter* temp = msg_.pc_;
    msg_.pc_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Event::set_allocated_pc(::tutorial::PerfCounter* pc) {
  clear_msg();
  if (pc) {
    set_has_pc();
    msg_.pc_ = pc;
  }
  // @@protoc_insertion_point(field_set_allocated:tutorial.Event.pc)
}

bool Event::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
void Event::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
Event::MsgCase Event::msg_case() const {
  return Event::MsgCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeepAlive::kIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeepAlive::KeepAlive()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_monik_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.KeepAlive)
}
KeepAlive::KeepAlive(const KeepAlive& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  interval_ = from.interval_;
  // @@protoc_insertion_point(copy_constructor:tutorial.KeepAlive)
}

void KeepAlive::SharedCtor() {
  interval_ = 0u;
  _cached_size_ = 0;
}

KeepAlive::~KeepAlive() {
  // @@protoc_insertion_point(destructor:tutorial.KeepAlive)
  SharedDtor();
}

void KeepAlive::SharedDtor() {
}

void KeepAlive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeepAlive::descriptor() {
  protobuf_monik_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_monik_2eproto::file_level_metadata[1].descriptor;
}

const KeepAlive& KeepAlive::default_instance() {
  protobuf_monik_2eproto::InitDefaults();
  return *internal_default_instance();
}

KeepAlive* KeepAlive::New(::google::protobuf::Arena* arena) const {
  KeepAlive* n = new KeepAlive;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeepAlive::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.KeepAlive)
  interval_ = 0u;
}

bool KeepAlive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.KeepAlive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 interval = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.KeepAlive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.KeepAlive)
  return false;
#undef DO_
}

void KeepAlive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.KeepAlive)
  // uint32 interval = 1;
  if (this->interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->interval(), output);
  }

  // @@protoc_insertion_point(serialize_end:tutorial.KeepAlive)
}

::google::protobuf::uint8* KeepAlive::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.KeepAlive)
  // uint32 interval = 1;
  if (this->interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->interval(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tutorial.KeepAlive)
  return target;
}

size_t KeepAlive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.KeepAlive)
  size_t total_size = 0;

  // uint32 interval = 1;
  if (this->interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->interval());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeepAlive::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.KeepAlive)
  GOOGLE_DCHECK_NE(&from, this);
  const KeepAlive* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeepAlive>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.KeepAlive)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.KeepAlive)
    MergeFrom(*source);
  }
}

void KeepAlive::MergeFrom(const KeepAlive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.KeepAlive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.interval() != 0) {
    set_interval(from.interval());
  }
}

void KeepAlive::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.KeepAlive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepAlive::CopyFrom(const KeepAlive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.KeepAlive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepAlive::IsInitialized() const {
  return true;
}

void KeepAlive::Swap(KeepAlive* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeepAlive::InternalSwap(KeepAlive* other) {
  std::swap(interval_, other->interval_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeepAlive::GetMetadata() const {
  protobuf_monik_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_monik_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeepAlive

// uint32 interval = 1;
void KeepAlive::clear_interval() {
  interval_ = 0u;
}
::google::protobuf::uint32 KeepAlive::interval() const {
  // @@protoc_insertion_point(field_get:tutorial.KeepAlive.interval)
  return interval_;
}
void KeepAlive::set_interval(::google::protobuf::uint32 value) {
  
  interval_ = value;
  // @@protoc_insertion_point(field_set:tutorial.KeepAlive.interval)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Log::kLevelFieldNumber;
const int Log::kSeverityFieldNumber;
const int Log::kFormatFieldNumber;
const int Log::kBodyFieldNumber;
const int Log::kTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Log::Log()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_monik_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.Log)
}
Log::Log(const Log& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.body().size() > 0) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  tags_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tags().size() > 0) {
    tags_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tags_);
  }
  ::memcpy(&level_, &from.level_,
    reinterpret_cast<char*>(&format_) -
    reinterpret_cast<char*>(&level_) + sizeof(format_));
  // @@protoc_insertion_point(copy_constructor:tutorial.Log)
}

void Log::SharedCtor() {
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tags_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&level_, 0, reinterpret_cast<char*>(&format_) -
    reinterpret_cast<char*>(&level_) + sizeof(format_));
  _cached_size_ = 0;
}

Log::~Log() {
  // @@protoc_insertion_point(destructor:tutorial.Log)
  SharedDtor();
}

void Log::SharedDtor() {
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tags_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Log::descriptor() {
  protobuf_monik_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_monik_2eproto::file_level_metadata[2].descriptor;
}

const Log& Log::default_instance() {
  protobuf_monik_2eproto::InitDefaults();
  return *internal_default_instance();
}

Log* Log::New(::google::protobuf::Arena* arena) const {
  Log* n = new Log;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Log::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.Log)
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tags_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&level_, 0, reinterpret_cast<char*>(&format_) -
    reinterpret_cast<char*>(&level_) + sizeof(format_));
}

bool Log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.Log)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tutorial.LevelType level = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_level(static_cast< ::tutorial::LevelType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tutorial.SeverityType severity = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_severity(static_cast< ::tutorial::SeverityType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tutorial.FormatType format = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_format(static_cast< ::tutorial::FormatType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string body = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->body().data(), this->body().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tutorial.Log.body"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tags = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tags().data(), this->tags().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tutorial.Log.tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.Log)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.Log)
  return false;
#undef DO_
}

void Log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.Log)
  // .tutorial.LevelType level = 1;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->level(), output);
  }

  // .tutorial.SeverityType severity = 2;
  if (this->severity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->severity(), output);
  }

  // .tutorial.FormatType format = 3;
  if (this->format() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->format(), output);
  }

  // string body = 4;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tutorial.Log.body");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->body(), output);
  }

  // string tags = 5;
  if (this->tags().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags().data(), this->tags().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tutorial.Log.tags");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->tags(), output);
  }

  // @@protoc_insertion_point(serialize_end:tutorial.Log)
}

::google::protobuf::uint8* Log::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.Log)
  // .tutorial.LevelType level = 1;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->level(), target);
  }

  // .tutorial.SeverityType severity = 2;
  if (this->severity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->severity(), target);
  }

  // .tutorial.FormatType format = 3;
  if (this->format() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->format(), target);
  }

  // string body = 4;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tutorial.Log.body");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->body(), target);
  }

  // string tags = 5;
  if (this->tags().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags().data(), this->tags().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tutorial.Log.tags");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->tags(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tutorial.Log)
  return target;
}

size_t Log::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.Log)
  size_t total_size = 0;

  // string body = 4;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->body());
  }

  // string tags = 5;
  if (this->tags().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tags());
  }

  // .tutorial.LevelType level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
  }

  // .tutorial.SeverityType severity = 2;
  if (this->severity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->severity());
  }

  // .tutorial.FormatType format = 3;
  if (this->format() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Log::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.Log)
  GOOGLE_DCHECK_NE(&from, this);
  const Log* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Log>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.Log)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.Log)
    MergeFrom(*source);
  }
}

void Log::MergeFrom(const Log& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.Log)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  if (from.tags().size() > 0) {

    tags_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tags_);
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.severity() != 0) {
    set_severity(from.severity());
  }
  if (from.format() != 0) {
    set_format(from.format());
  }
}

void Log::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Log::CopyFrom(const Log& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Log::IsInitialized() const {
  return true;
}

void Log::Swap(Log* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Log::InternalSwap(Log* other) {
  body_.Swap(&other->body_);
  tags_.Swap(&other->tags_);
  std::swap(level_, other->level_);
  std::swap(severity_, other->severity_);
  std::swap(format_, other->format_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Log::GetMetadata() const {
  protobuf_monik_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_monik_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Log

// .tutorial.LevelType level = 1;
void Log::clear_level() {
  level_ = 0;
}
::tutorial::LevelType Log::level() const {
  // @@protoc_insertion_point(field_get:tutorial.Log.level)
  return static_cast< ::tutorial::LevelType >(level_);
}
void Log::set_level(::tutorial::LevelType value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Log.level)
}

// .tutorial.SeverityType severity = 2;
void Log::clear_severity() {
  severity_ = 0;
}
::tutorial::SeverityType Log::severity() const {
  // @@protoc_insertion_point(field_get:tutorial.Log.severity)
  return static_cast< ::tutorial::SeverityType >(severity_);
}
void Log::set_severity(::tutorial::SeverityType value) {
  
  severity_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Log.severity)
}

// .tutorial.FormatType format = 3;
void Log::clear_format() {
  format_ = 0;
}
::tutorial::FormatType Log::format() const {
  // @@protoc_insertion_point(field_get:tutorial.Log.format)
  return static_cast< ::tutorial::FormatType >(format_);
}
void Log::set_format(::tutorial::FormatType value) {
  
  format_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Log.format)
}

// string body = 4;
void Log::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Log::body() const {
  // @@protoc_insertion_point(field_get:tutorial.Log.body)
  return body_.GetNoArena();
}
void Log::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Log.body)
}
#if LANG_CXX11
void Log::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Log.body)
}
#endif
void Log::set_body(const char* value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Log.body)
}
void Log::set_body(const char* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Log.body)
}
::std::string* Log::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.Log.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Log::release_body() {
  // @@protoc_insertion_point(field_release:tutorial.Log.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Log::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Log.body)
}

// string tags = 5;
void Log::clear_tags() {
  tags_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Log::tags() const {
  // @@protoc_insertion_point(field_get:tutorial.Log.tags)
  return tags_.GetNoArena();
}
void Log::set_tags(const ::std::string& value) {
  
  tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Log.tags)
}
#if LANG_CXX11
void Log::set_tags(::std::string&& value) {
  
  tags_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Log.tags)
}
#endif
void Log::set_tags(const char* value) {
  
  tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Log.tags)
}
void Log::set_tags(const char* value, size_t size) {
  
  tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Log.tags)
}
::std::string* Log::mutable_tags() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.Log.tags)
  return tags_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Log::release_tags() {
  // @@protoc_insertion_point(field_release:tutorial.Log.tags)
  
  return tags_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Log::set_allocated_tags(::std::string* tags) {
  if (tags != NULL) {
    
  } else {
    
  }
  tags_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tags);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Log.tags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfCounter::PerfCounter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_monik_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.PerfCounter)
}
PerfCounter::PerfCounter(const PerfCounter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tutorial.PerfCounter)
}

void PerfCounter::SharedCtor() {
  _cached_size_ = 0;
}

PerfCounter::~PerfCounter() {
  // @@protoc_insertion_point(destructor:tutorial.PerfCounter)
  SharedDtor();
}

void PerfCounter::SharedDtor() {
}

void PerfCounter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PerfCounter::descriptor() {
  protobuf_monik_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_monik_2eproto::file_level_metadata[3].descriptor;
}

const PerfCounter& PerfCounter::default_instance() {
  protobuf_monik_2eproto::InitDefaults();
  return *internal_default_instance();
}

PerfCounter* PerfCounter::New(::google::protobuf::Arena* arena) const {
  PerfCounter* n = new PerfCounter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PerfCounter::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.PerfCounter)
}

bool PerfCounter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.PerfCounter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.PerfCounter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.PerfCounter)
  return false;
#undef DO_
}

void PerfCounter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.PerfCounter)
  // @@protoc_insertion_point(serialize_end:tutorial.PerfCounter)
}

::google::protobuf::uint8* PerfCounter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.PerfCounter)
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.PerfCounter)
  return target;
}

size_t PerfCounter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.PerfCounter)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerfCounter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tutorial.PerfCounter)
  GOOGLE_DCHECK_NE(&from, this);
  const PerfCounter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PerfCounter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tutorial.PerfCounter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tutorial.PerfCounter)
    MergeFrom(*source);
  }
}

void PerfCounter::MergeFrom(const PerfCounter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.PerfCounter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void PerfCounter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tutorial.PerfCounter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerfCounter::CopyFrom(const PerfCounter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.PerfCounter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfCounter::IsInitialized() const {
  return true;
}

void PerfCounter::Swap(PerfCounter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerfCounter::InternalSwap(PerfCounter* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PerfCounter::GetMetadata() const {
  protobuf_monik_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_monik_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PerfCounter

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

// @@protoc_insertion_point(global_scope)
